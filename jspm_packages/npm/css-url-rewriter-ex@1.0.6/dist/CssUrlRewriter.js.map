{"version":3,"sources":["../src/CssUrlRewriter.js"],"names":["CssUrlRewriter","options","urlRe","root","reset","filename","content","resolver","replace","match","prefix","rawUrl","undefined","url","cleanUrl","newUrl","defaultResolver","resolutions","result","forEach","urls","fromUrl","toUrl","push","uniqueMap","getResolutions","map","record","isDataUrl","startsWith","isAbsUrl","isAbsoluteUrl","baseDir","dirname","assetPath","join","getAssetPath","fromPath","relative","toPath","filter","reduce","baseUrl","relUrl","publicPath","test","isAbsolute","endsWith","substr","length","trim"],"mappings":"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","file":"CssUrlRewriter.js","sourcesContent":["import path from 'path';\n\nexport default class CssUrlRewriter {\n  /* eslint-disable */\n  urlRe = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/[^\\r\\n]*(?:\\r\\n|\\r|\\n|$)|([\\s,:])url\\(\\s*(\"[^\"]+\"|'[^']+'|[^)]+)\\s*\\)/ig;\n  /* eslint-enable */\n\n  /**\n   * Constructor.\n   *\n   * @param {Object}    options\n   * @prop  {String}    root\n   * @prop  {String}    publicPath\n   * @prop  {Function}  function resolver(url, filename, options)\n   *                    - return false to skip resolving\n   *                    - return undefined or null to use default resolver\n   *                    - return resolved url to use it\n   */\n  constructor(options) {\n    this.options = Object.assign({ root: '.' }, options);\n    this.reset();\n  }\n\n  /**\n   * Rewrite all URLs in source file.\n   *\n   * @param   {String}  filename\n   * @param   {String}  originalContent\n   *\n   * @returns {String}  fixedContent\n   */\n  rewrite(filename, content) {\n    if (!this.options.root && !this.options.resolver) {\n      return content;\n    }\n\n    return content.replace(this.urlRe, (match, prefix, rawUrl) => {\n      if (prefix === undefined) {\n        // looks like block/line comment is found, so bypass it\n        return match;\n      }\n\n      const url = this.cleanUrl(rawUrl);\n\n      let newUrl = this.options.resolver\n        ? this.options.resolver(url, filename, this.options)\n        : undefined;\n\n      if (newUrl === undefined || newUrl === null) {\n        newUrl = this.defaultResolver(url, filename, this.options);\n      } else if (newUrl === false) {\n        newUrl = url;\n      }\n\n      if (newUrl) {\n        this.resolutions[filename] = this.resolutions[filename] || {};\n        this.resolutions[filename][url] = newUrl;\n      }\n\n      return `${prefix}url(\"${newUrl}\")`;\n    });\n  }\n\n  /**\n   * Clear internal state.\n   */\n  reset() {\n    this.resolutions = {};\n  }\n\n  /**\n   * Get list of all resolved URLs for all files.\n   *\n   * @returns {Array[{ filename, fromUrl, toUrl }]}\n   */\n  getResolutions() {\n    const result = [];\n\n    Object.entries(this.resolutions)\n      .forEach(([filename, urls]) => {\n        Object.entries(urls)\n          .forEach(([fromUrl, toUrl]) => {\n            result.push({ filename, fromUrl, toUrl });\n          });\n      });\n\n    return result;\n  }\n\n  /**\n   * Get list of unique assets used in during resolving.\n   *\n   * @returns {Array[{ fromPath, toPath }]}\n   */\n  getLocalAssetList() {\n    const uniqueMap = this.getResolutions()\n      .map((record) => {\n        const isDataUrl = record.fromUrl.startsWith('data:');\n        const isAbsUrl = !isDataUrl && this.isAbsoluteUrl(record.fromUrl);\n\n        if (isAbsUrl || isDataUrl) {\n          return false;\n        }\n\n        const baseDir = path.dirname(record.filename);\n        const assetPath = path.join(baseDir, this.getAssetPath(record.fromUrl));\n\n        const fromPath = path.relative(this.options.root, assetPath);\n        const toPath = this.getAssetPath(record.toUrl);\n\n        return { fromPath, toPath };\n      })\n      .filter(record => !!record)\n      .reduce((result, record) => {\n        result[record.fromPath] = record; // eslint-disable-line no-param-reassign\n        return result;\n      }, {});\n\n    return Object.values(uniqueMap);\n  }\n\n  defaultResolver(url, filename, options) {\n    const isDataUrl = url.startsWith('data:');\n    const isAbsUrl = !isDataUrl && this.isAbsoluteUrl(url);\n\n    if (isAbsUrl || isDataUrl) {\n      return url;\n    }\n\n    const baseUrl = path.relative(options.root, path.dirname(filename));\n    const relUrl = path.join(baseUrl, url);\n\n    return options.publicPath ? options.publicPath + relUrl : relUrl;\n  }\n\n  isAbsoluteUrl(url) {\n    return /^([a-z0-9_]+:)?\\/\\//i.test(url) || path.isAbsolute(url);\n  }\n\n  cleanUrl(url) {\n    let result = url;\n\n    if ((url.startsWith('\"') && url.endsWith('\"'))\n      || (url.startsWith(\"'\") && url.endsWith(\"'\"))\n    ) {\n      result = result.substr(1, url.length - 2);\n    }\n\n    return result.trim();\n  }\n\n  getAssetPath(url) {\n    return url.replace(/[#?].*$/, '');\n  }\n}\n"]}
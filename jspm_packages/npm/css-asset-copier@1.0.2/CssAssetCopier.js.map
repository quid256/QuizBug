{"version":3,"sources":["../src/CssAssetCopier.js"],"names":["CssAssetCopier","target","copyPromises","tasks","promises","map","fromPath","toPath","targetPath","join","resolve","copyAsset","undefined","all","promise","reject","copy","error"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,c;AACnB;;;;;AAKA,0BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,UAAU,GAAxB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACD;;AAED;;;;;;;;;;;+BAOWC,K,EAAO;AAAA;;AAChB,UAAMC,WAAWD,MAAME,GAAN,CAAU,gBAA0B;AAAA,YAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,YAAbC,MAAa,QAAbA,MAAa;;AACnD,YAAMC,aAAa,eAAKC,IAAL,CAAU,MAAKR,MAAf,EAAuBM,MAAvB,CAAnB;;AAEA,YAAI,eAAKG,OAAL,CAAaJ,QAAb,MAA2B,eAAKI,OAAL,CAAaF,UAAb,CAA/B,EAAyD;AACvD,iBAAO,MAAKG,SAAL,CAAeL,QAAf,EAAyBE,UAAzB,CAAP;AACD;;AAED,eAAOI,SAAP;AACD,OARgB,CAAjB;;AAUA,aAAO,kBAAQC,GAAR,CAAYT,QAAZ,CAAP;AACD;;;8BAESE,Q,EAAUC,M,EAAQ;AAC1B,UAAI,KAAKL,YAAL,CAAkBK,MAAlB,CAAJ,EAA+B;AAC7B,eAAO,KAAKL,YAAL,CAAkBK,MAAlB,CAAP;AACD;;AAED,UAAMO,UAAU,sBAAY,UAACJ,OAAD,EAAUK,MAAV,EAAqB;AAC/C,0BAAIC,IAAJ,CAASV,QAAT,EAAmBC,MAAnB,EAA2B,UAACU,KAAD,EAAW;AACpC,cAAIA,KAAJ,EAAW;AACTF,mBAAOE,KAAP;AACD,WAFD,MAEO;AACLP;AACD;AACF,SAND;AAOD,OARe,CAAhB;;AAUA,WAAKR,YAAL,CAAkBK,MAAlB,IAA4BO,OAA5B;;AAEA,aAAOA,OAAP;AACD;;;;;kBAlDkBd,c","file":"CssAssetCopier.js","sourcesContent":["import path from 'path';\nimport fse from 'fs-extra';\n\nexport default class CssAssetCopier {\n  /**\n   * Constructor.\n   *\n   * @param {String} target\n   */\n  constructor(target) {\n    this.target = target || '.';\n    this.copyPromises = {};\n  }\n\n  /**\n   * Copy local assets from URLs for distribution.\n   *\n   * @param   {Array[{ fromPath, toPath }]} tasks\n   *\n   * @returns {Promise} which will be resolved once all files will be copied\n   */\n  copyAssets(tasks) {\n    const promises = tasks.map(({ fromPath, toPath }) => {\n      const targetPath = path.join(this.target, toPath);\n\n      if (path.resolve(fromPath) !== path.resolve(targetPath)) {\n        return this.copyAsset(fromPath, targetPath);\n      }\n\n      return undefined;\n    });\n\n    return Promise.all(promises);\n  }\n\n  copyAsset(fromPath, toPath) {\n    if (this.copyPromises[toPath]) {\n      return this.copyPromises[toPath];\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      fse.copy(fromPath, toPath, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    this.copyPromises[toPath] = promise;\n\n    return promise;\n  }\n}\n"]}